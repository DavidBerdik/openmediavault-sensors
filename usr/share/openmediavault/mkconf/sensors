#!/bin/sh

set -e

. /etc/default/openmediavault
. /usr/share/openmediavault/scripts/helper-functions

y=0
outfile="/usr/share/openmediavault/mkconf/collectd.d/sensors"
end='\'
starteof2='cat <<EOF >> ${OMV_COLLECTD_RRDTOOL_MKGRAPH}'
starteof1='cat <<EOF >> ${OMV_COLLECTD_CONFIG}'
statment1='if ! grep -q "LoadPlugin sensors" "$OMV_COLLECTD_CONFIG"; then'
#statment2='if ! grep -q "LoadPlugin sensors" "$OMV_COLLECTD_CONFIG"; then'
endeof='EOF'
graph='OMV_COLLECTD_RRDTOOL_MKGRAPH=${OMV_COLLECTD_RRDTOOL_MKGRAPH:-"/usr/sbin/omv-mkgraph"}'
collected='OMV_COLLECTD_CONFIG=${OMV_COLLECTD_CONFIG:-"/etc/collectd/collectd.conf"}'


#Check status of the enable checkbox
if [ "$(omv_config_get "//services/sensors/cpuenable")" = "0" ]; then
    if [ -f /usr/share/openmediavault/mkconf/collectd.d/sensors ]; then
        rm -f /usr/share/openmediavault/mkconf/collectd.d/sensors
    fi

    if [ -f /var/www/openmediavault/js/omv/module/admin/diagnostic/system/plugin/Sensors.js ]; then
        rm -f /var/www/openmediavault/js/omv/module/admin/diagnostic/system/plugin/Sensors.js
    fi

    if grep -q "LoadPlugin sensors" /etc/collectd/collectd.conf; then
        sed -i '/LoadPlugin sensors/d' /etc/collectd/collectd.conf
    if
    sed -i '/#\ <<<\ \[openmediavault\]\ sensors-script/,/#\ >>>\ \[openmediavault\]\ sensors-script/d' /usr/sbin/omv-mkgraph
    exit 0
fi

if [ ! -f /usr/share/openmediavault/mkconf/collectd.d/sensors ]; then
    if ! grep -q "LoadPlugin sensors" /etc/collectd/collectd.conf; then
        /usr/sbin/omv-sensors-detect > /dev/null 2>&1
        cat <<EOF >> /etc/collectd/collectd.conf
LoadPlugin sensors

EOF
        /etc/init.d/collectd restart > /dev/null 2>&1
    fi

    # Get main CPU
    # Like cores but ATM i don't know values
    if [ -e /var/lib/rrdcached/db/localhost/sensors-atk011*/temperature-temp1.rrd ]; then
        main_cpu="sensors-atk0110*"
    elif [ -e /var/lib/rrdcached/db/localhost/sensors-axp20_mfd*/temperature-temp1.rrd ]; then
        main_cpu="sensors-axp20_mfd*"
    elif [ -e /var/lib/rrdcached/db/localhost/sensors-it87*/temperature-temp1.rrd ]; then
        main_cpu="sensors-it87*"
    elif [ -e /var/lib/rrdcached/db/localhost/sensors-w83627hf*/temperature-temp1.rrd ]; then
        main_cpu="sensors-w83627hf*"
    elif [ -e /var/lib/rrdcached/db/localhost/sensors-k10temp* ]; then
        main_cpu="sensors-k10temp*"
    elif [ -e /var/lib/rrdcached/db/localhost/sensors-w83667hg*/temperature-temp1.rrd ]; then
        main_cpu="sensors-w83667hg*"
    elif [ -e /var/lib/rrdcached/db/localhost/sensors-acpitz*/temperature-temp1.rrd ]; then
        main_cpu=""
    else
        main_cpu=""
    fi

    # Get Cores
    if [ -e /var/lib/rrdcached/db/localhost/sensors-coretemp* ]; then
        core="sensors-coretemp*"
    elif [ -e /var/lib/rrdcached/db/localhost/sensors-via686a* ]; then
        core="sensors-via686a*"
    elif [ -e /var/lib/rrdcached/db/localhost/sensors-vt8231* ]; then
        core="sensors-vt8231*"
    elif [ -e /var/lib/rrdcached/db/localhost/sensors-k8temp* ]; then
        core="sensors-k8temp*"
    elif [ -e /var/lib/rrdcached/db/localhost/sensors-fam15h_power* ]; then
        core="sensors-fam15h_power*"
    elif [ -e /var/lib/rrdcached/db/localhost/sensors-sis5595* ]; then
        core="sensors-sis5595*"
    elif [ -e /var/lib/rrdcached/db/localhost/sensors-i5k_amb* ]; then
        core="sensors-sensors-i5k_amb*"
    elif [ -e /var/lib/rrdcached/db/localhost/sensors-via-cputemp* ]; then
        core="sensors-via-cputemp*"
    else
        core=""
    fi

    if [ $core != "" ]; then
        cd /var/lib/rrdcached/db/localhost/$core
        cores=`basename $PWD`
        # Other Method to get cores
        cpucore1=`cat /proc/cpuinfo | grep -m1 "cpu cores" | cut -d ":" -f2`
        cpucore2=`ls -l temp* | grep ^- | wc -l`
        cores_no=`ls temp* | xargs -n1 basename`

        if [ "$cpucore1" = "" ]; then
            cpucore1=1
        fi

        #cpucore1=1

        if [ $cpucore2 != $cpucore1 ]; then
            y=1
        fi

    fi

    if [ "$y" = "1" ]; then
        main=$cores
    elif [ $main_cpu != "" ]; then
        cd /var/lib/rrdcached/db/localhost/$main_cpu
        main=`basename $PWD`
    fi

    do_loop1()
    {
    if [ $main_cpu != "" ]; then
        cat <<EOF >> $outfile
  DEF:cpupavg=\\\${DATA}/${main}/temperature-temp1.rrd:value:AVERAGE ${end}
  DEF:cpupmin=\\\${DATA}/${main}/temperature-temp1.rrd:value:MIN ${end}
  DEF:cpupmax=\\\${DATA}/${main}/temperature-temp1.rrd:value:MAX ${end}
EOF
    fi
    }

    do_loop2()
    {
    x=0
    for items in $cores_no;
    do
        if [ "$y" = "1" ] && [ $x != "0" ] || [ "$y" = "0" ]; then
            cat <<EOF >> $outfile
  DEF:cpuc$((x - y))avg=\\\${DATA}/${cores}/${items}:value:AVERAGE ${end}
  DEF:cpuc$((x - y))min=\\\${DATA}/${cores}/${items}:value:MIN ${end}
  DEF:cpuc$((x - y))max=\\\${DATA}/${cores}/${items}:value:MAX ${end}
EOF

        fi
        x=$((x + 1))
    done
    }

    do_loop3()
    {
    if [ $main_cpu != "" ]; then
        cat <<EOF >> $outfile
  LINE1:cpupavg\\\${COLOR_CPU_PHYSICAL}:"   CPU" ${end}
  GPRINT:cpupmin:MIN:"%4.2lf Min" ${end}
  GPRINT:cpupavg:AVERAGE:"%4.2lf Avg" ${end}
  GPRINT:cpupmax:MAX:"%4.2lf Max" ${end}
  GPRINT:cpupavg:LAST:"%4.2lf Last\l" ${end}
EOF
    fi
    }

    do_loop4()
    {
    x=0
    for items in $cores_no;
    do
        if [ "$y" = "1" ] && [ $x != "0" ] || [ "$y" = "0" ]; then
            cat <<EOF >> $outfile
  LINE1:cpuc$((x - y))avg\\\${COLOR_CPU_CORE_$((x - y))}:"Core $((x - y + 1))" ${end}
  GPRINT:cpuc$((x - y))min:MIN:"%4.2lf Min" ${end}
  GPRINT:cpuc$((x - y))avg:AVERAGE:"%4.2lf Avg" ${end}
  GPRINT:cpuc$((x - y))max:MAX:"%4.2lf Max" ${end}
  GPRINT:cpuc$((x - y))avg:LAST:"%4.2lf Last\l" ${end}
EOF

        fi
        x=$((x + 1))
    done
    }

    if [ "$core" = "" ] && [ "$main_cpu" = "" ]; then
        exit 0
    fi

    cat <<EOF > $outfile
#!/bin/sh
#
# This file is part of OpenMediaVault.
#
# @license   http://www.gnu.org/licenses/gpl.html GPL Version 3
# @author    Volker Theile <volker.theile@openmediavault.org>
# @copyright Copyright (c) 2009-2015 Volker Theile
#
# OpenMediaVault is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# OpenMediaVault is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with OpenMediaVault. If not, see <http://www.gnu.org/licenses/>.

set -e

. /etc/default/openmediavault
. /usr/share/openmediavault/scripts/helper-functions

${collected}
${graph}

#${starteof1}
#LoadPlugin sensors
#
#$endeof

${starteof2}
# <<< [openmediavault] sensors-script
# Plugin: sensors
TITLE_LOAD="CPU temperature"
COLOR_CPU_PHYSICAL="#00cc00" # green
COLOR_CPU_CORE_0="#0000fd"   # blue
COLOR_CPU_CORE_1="#ff0000"   # red
COLOR_CPU_CORE_2="#cc00cc"   # purple
COLOR_CPU_CORE_3="#0000cc"   # dark blue
COLOR_CPU_CORE_4="#cc6600"   # brown
COLOR_CPU_CORE_5="#ff8308"   # orange
COLOR_CPU_CORE_6="#ffce3b"   # yellow
COLOR_CPU_CORE_7="#004f00"   # dark green
$endeof
for ucperiod in HOUR DAY WEEK MONTH YEAR; do
        lcperiod=\$(echo \${ucperiod} | tr '[:upper:]' '[:lower:]')
        ${starteof2}
rrdtool graph \\\${IMGDIR}/sensors-\${lcperiod}.png --start \\\${\${ucperiod}START} \\\${DEFAULTS} --title "\\\${TITLE_LOAD}\\\${\${ucperiod}TITLE}" --slope-mode --upper-limit 80 --lower-limit 0 --units-exponent 0 ${end}
EOF


    do_loop1;

    if [ $core != "" ]; then
        do_loop2;
    fi

    do_loop3;

    if [ $core != "" ]; then
        do_loop4;
    fi

    cat <<EOF >> $outfile
COMMENT:"\\\${LASTUPDATE}" >/dev/null
${endeof}
done
${starteof2}
# >>> [openmediavault] sensors-script
${endeof}
EOF
fi

if [ ! -f /var/www/openmediavault/js/omv/module/admin/diagnostic/system/plugin/Sensors.js ]; then
    cat <<EOF >> /var/www/openmediavault/js/omv/module/admin/diagnostic/system/plugin/Sensors.js
/**
 * This file is part of OpenMediaVault.
 *
 * @license   http://www.gnu.org/licenses/gpl.html GPL Version 3
 * @author    Volker Theile <volker.theile@openmediavault.org>
 * @copyright Copyright (c) 2009-2014 Volker Theile
 *
 * OpenMediaVault is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * any later version.
 *
 * OpenMediaVault is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with OpenMediaVault. If not, see <http://www.gnu.org/licenses/>.
 */
// require("js/omv/workspace/panel/RrdGraph.js")

/**
 * @class OMV.module.admin.diagnostic.system.plugin.Sensors
 * @derived OMV.workspace.panel.RrdGraph
 */
Ext.define("OMV.module.admin.diagnostic.system.plugin.Sensors", {
        extend: "OMV.workspace.panel.RrdGraph",
        alias: "omv.plugin.diagnostic.system.sensors",

        title: _("Temperature monitor"),
        rrdGraphName: "sensors"
});

EOF
fi

if [ "$(omv_config_get "//services/sensors/cpuenable")" = "1" ]; then
    # Make sure omv-mkgraph is clean
    sed -i '/#\ <<<\ \[openmediavault\]\ sensors-script/,/#\ >>>\ \[openmediavault\]\ sensors-script/d' /usr/sbin/omv-mkgraph
    if ! egrep "^LoadPlugin sensors" /etc/collectd/collectd.conf 2> /dev/null; then
        echo -e "LoadPlugin sensors\n" >> /etc/collectd/collectd.conf
    fi

    chmod +x /usr/share/openmediavault/mkconf/collectd.d/sensors
    /usr/share/openmediavault/mkconf/collectd.d/sensors
    /etc/init.d/collectd restart > /dev/null 2>&1
    /usr/sbin/omv-mkgraph > /dev/null 2>&1
    rm -f /var/cache/openmediavault/cache.*.json > /dev/null 2>&1
fi

exit 0
